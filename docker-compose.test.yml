version: "3.9"

services:
  app:
    build:
      context: .
      target: test
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=test
      - DB_HOST=127.0.0.1
      - DB_PORT=27017
      - DB_USER=root
      - DB_PASSWORD=pass
      - DB_NAME=RnDAO
      - DISCORD_CLIENT_ID=1
      - DISCORD_CLIENT_SECRET=1
      - SENTRY_DSN=1
      - SENTRY_ENV=test
      - DISCORD_BOT_TOKEN=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - RABBIT_HOST=localhost
      - RABBIT_PORT=5672
      - RABBIT_USER=root
      - RABBIT_PASSWORD=pass
      - LOG_LEVEL=info
    volumes:
      - ./coverage:/project/coverage
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq: 
        condition: service_healthy
  mongo:
    image: "mongo:4.4"
    environment:
      - MONGO_INITDB_DATABASE=RnDAO
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=pass
    healthcheck:
      test: echo 'db.stats().ok' | mongosh localhost:27017/test --quiet
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 40s
  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=pass
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 2
      start_period: 40s
  redis:
    image: redis:7.0.11
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    ports:
      - 6379:6379